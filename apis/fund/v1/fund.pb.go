// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: fund/v1/fund.proto

package v1

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type FreezeAmountRequest struct {
	CoreOrderId          string   `protobuf:"bytes,1,opt,name=core_order_id,json=coreOrderId,proto3" json:"core_order_id,omitempty"`
	Volume               string   `protobuf:"bytes,4,opt,name=volume,proto3" json:"volume,omitempty"`
	Amount               string   `protobuf:"bytes,5,opt,name=amount,proto3" json:"amount,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FreezeAmountRequest) Reset()         { *m = FreezeAmountRequest{} }
func (m *FreezeAmountRequest) String() string { return proto.CompactTextString(m) }
func (*FreezeAmountRequest) ProtoMessage()    {}
func (*FreezeAmountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_14e8fb98a27c5afa, []int{0}
}
func (m *FreezeAmountRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FreezeAmountRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FreezeAmountRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FreezeAmountRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FreezeAmountRequest.Merge(m, src)
}
func (m *FreezeAmountRequest) XXX_Size() int {
	return m.Size()
}
func (m *FreezeAmountRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FreezeAmountRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FreezeAmountRequest proto.InternalMessageInfo

func (m *FreezeAmountRequest) GetCoreOrderId() string {
	if m != nil {
		return m.CoreOrderId
	}
	return ""
}

func (m *FreezeAmountRequest) GetVolume() string {
	if m != nil {
		return m.Volume
	}
	return ""
}

func (m *FreezeAmountRequest) GetAmount() string {
	if m != nil {
		return m.Amount
	}
	return ""
}

type FreezeAmountResponse struct {
	Code                 int64                      `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg                  string                     `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data                 *FreezeAmountResponse_Data `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *FreezeAmountResponse) Reset()         { *m = FreezeAmountResponse{} }
func (m *FreezeAmountResponse) String() string { return proto.CompactTextString(m) }
func (*FreezeAmountResponse) ProtoMessage()    {}
func (*FreezeAmountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_14e8fb98a27c5afa, []int{1}
}
func (m *FreezeAmountResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FreezeAmountResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FreezeAmountResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FreezeAmountResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FreezeAmountResponse.Merge(m, src)
}
func (m *FreezeAmountResponse) XXX_Size() int {
	return m.Size()
}
func (m *FreezeAmountResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_FreezeAmountResponse.DiscardUnknown(m)
}

var xxx_messageInfo_FreezeAmountResponse proto.InternalMessageInfo

func (m *FreezeAmountResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *FreezeAmountResponse) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *FreezeAmountResponse) GetData() *FreezeAmountResponse_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

type FreezeAmountResponse_Data struct {
	Commission           string   `protobuf:"bytes,1,opt,name=commission,proto3" json:"commission,omitempty"`
	Digit                int32    `protobuf:"varint,2,opt,name=digit,proto3" json:"digit,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FreezeAmountResponse_Data) Reset()         { *m = FreezeAmountResponse_Data{} }
func (m *FreezeAmountResponse_Data) String() string { return proto.CompactTextString(m) }
func (*FreezeAmountResponse_Data) ProtoMessage()    {}
func (*FreezeAmountResponse_Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_14e8fb98a27c5afa, []int{1, 0}
}
func (m *FreezeAmountResponse_Data) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FreezeAmountResponse_Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FreezeAmountResponse_Data.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FreezeAmountResponse_Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FreezeAmountResponse_Data.Merge(m, src)
}
func (m *FreezeAmountResponse_Data) XXX_Size() int {
	return m.Size()
}
func (m *FreezeAmountResponse_Data) XXX_DiscardUnknown() {
	xxx_messageInfo_FreezeAmountResponse_Data.DiscardUnknown(m)
}

var xxx_messageInfo_FreezeAmountResponse_Data proto.InternalMessageInfo

func (m *FreezeAmountResponse_Data) GetCommission() string {
	if m != nil {
		return m.Commission
	}
	return ""
}

func (m *FreezeAmountResponse_Data) GetDigit() int32 {
	if m != nil {
		return m.Digit
	}
	return 0
}

func init() {
	proto.RegisterType((*FreezeAmountRequest)(nil), "FreezeAmountRequest")
	proto.RegisterType((*FreezeAmountResponse)(nil), "FreezeAmountResponse")
	proto.RegisterType((*FreezeAmountResponse_Data)(nil), "FreezeAmountResponse.Data")
}

func init() { proto.RegisterFile("fund/v1/fund.proto", fileDescriptor_14e8fb98a27c5afa) }

var fileDescriptor_14e8fb98a27c5afa = []byte{
	// 559 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x52, 0xcf, 0x8b, 0xd3, 0x40,
	0x14, 0x76, 0x76, 0xbb, 0x85, 0x9d, 0xd6, 0x82, 0x63, 0x8b, 0xa1, 0x48, 0x59, 0x7b, 0xd0, 0x5d,
	0xb1, 0x09, 0x8d, 0x9e, 0xf4, 0x94, 0xa2, 0x45, 0x4f, 0x42, 0xbc, 0x79, 0x29, 0x31, 0x99, 0xc6,
	0xc0, 0x76, 0x26, 0x26, 0x69, 0x40, 0xc1, 0x83, 0x1e, 0x5c, 0x54, 0x4a, 0x35, 0xdd, 0x95, 0x65,
	0x41, 0xd0, 0xb5, 0x8a, 0x17, 0xd7, 0x1f, 0x14, 0x74, 0x5b, 0xf1, 0xec, 0x51, 0xea, 0x3f, 0x20,
	0xb5, 0x69, 0xda, 0xff, 0x42, 0x32, 0x4d, 0x61, 0x17, 0x7b, 0x79, 0x8f, 0xe1, 0xfb, 0x1e, 0xdf,
	0x37, 0xef, 0x7d, 0x10, 0x55, 0xeb, 0x44, 0x13, 0xdc, 0xa2, 0x10, 0x76, 0xde, 0xb4, 0xa8, 0x43,
	0xb3, 0x27, 0x75, 0x4a, 0xf5, 0x75, 0x2c, 0x28, 0xa6, 0x21, 0x28, 0x84, 0x50, 0x47, 0x71, 0x0c,
	0x4a, 0xec, 0x08, 0x9d, 0x36, 0xb5, 0xa0, 0x63, 0x52, 0xa0, 0x26, 0x26, 0x8a, 0x69, 0xb8, 0xa2,
	0x40, 0x4d, 0xc6, 0xf9, 0x9f, 0x9f, 0xff, 0x08, 0xe0, 0xf1, 0xb2, 0x85, 0xf1, 0x3d, 0x2c, 0xd5,
	0x68, 0x9d, 0x38, 0x32, 0xbe, 0x53, 0xc7, 0xb6, 0x83, 0xae, 0xc0, 0xa3, 0x2a, 0xb5, 0x70, 0x85,
	0x5a, 0x1a, 0xb6, 0x2a, 0x86, 0xc6, 0x81, 0x15, 0xb0, 0xba, 0x5c, 0x3a, 0xe5, 0x49, 0x39, 0x31,
	0x39, 0xde, 0xdb, 0xf5, 0x1b, 0x5b, 0xc1, 0xf7, 0x17, 0x7e, 0xf3, 0x6b, 0x1f, 0x1c, 0x26, 0xca,
	0x89, 0xf0, 0x79, 0x3d, 0x7c, 0x5d, 0xd3, 0xd0, 0x69, 0x18, 0x77, 0xe9, 0x7a, 0xbd, 0x86, 0xb9,
	0x18, 0x9b, 0x4f, 0x79, 0x52, 0x42, 0x5c, 0x1e, 0x76, 0xdb, 0xa3, 0xed, 0xd6, 0x64, 0xa3, 0x29,
	0x47, 0x28, 0x5a, 0x83, 0x71, 0x85, 0xe9, 0x73, 0x4b, 0x8c, 0x77, 0xcc, 0x93, 0x52, 0x33, 0x9d,
	0xc9, 0xc6, 0xf3, 0xc9, 0xee, 0x4b, 0x39, 0x22, 0xe4, 0x77, 0x16, 0x60, 0xfa, 0xb0, 0x63, 0xdb,
	0xa4, 0xc4, 0xc6, 0xe8, 0x1c, 0x8c, 0xa9, 0x54, 0xc3, 0xcc, 0xe9, 0x62, 0x89, 0xf3, 0xa4, 0x8c,
	0x98, 0x1c, 0x7e, 0xdb, 0xf1, 0x9f, 0xbc, 0x1e, 0xf6, 0xde, 0x04, 0xaf, 0x1e, 0xf4, 0x01, 0xc3,
	0x65, 0x56, 0xd1, 0x1a, 0x5c, 0xac, 0xd9, 0x3a, 0xb7, 0xc0, 0xe4, 0x4e, 0x78, 0x52, 0x5a, 0x4c,
	0xfa, 0xed, 0xcf, 0xe3, 0xce, 0xdb, 0x51, 0xf3, 0x59, 0xd0, 0xee, 0xf6, 0x41, 0x08, 0xcb, 0x61,
	0x41, 0x57, 0x61, 0x4c, 0x53, 0x1c, 0x85, 0x5b, 0x5c, 0x01, 0xab, 0x09, 0x31, 0xcb, 0xcf, 0x53,
	0xe7, 0x2f, 0x2b, 0x8e, 0x12, 0x89, 0xfa, 0xad, 0x86, 0xdf, 0xdd, 0x1c, 0x6d, 0x7d, 0x1a, 0x35,
	0xf6, 0xfa, 0x80, 0xcd, 0xca, 0xac, 0x66, 0x2b, 0x30, 0x16, 0xf2, 0x10, 0x0f, 0xa1, 0x4a, 0x6b,
	0x35, 0xc3, 0xb6, 0x0d, 0x4a, 0xa2, 0xd5, 0x4e, 0x57, 0x33, 0x7a, 0xfc, 0x34, 0xe8, 0x7d, 0x18,
	0x77, 0xf6, 0xe5, 0x03, 0x0c, 0x74, 0x06, 0x2e, 0x69, 0x86, 0x6e, 0x38, 0xcc, 0xee, 0xd2, 0x6c,
	0x3b, 0x9d, 0xfd, 0x60, 0xf3, 0x7d, 0xf0, 0xe5, 0x87, 0xdf, 0x7d, 0x27, 0x4f, 0x71, 0xf1, 0x3e,
	0x4c, 0x94, 0xeb, 0x44, 0xbb, 0x81, 0x2d, 0xd7, 0x50, 0x31, 0x22, 0x30, 0x79, 0xd0, 0x2c, 0x4a,
	0xf3, 0x73, 0x6e, 0x9d, 0xcd, 0xcc, 0xfd, 0x51, 0xbe, 0xe8, 0x49, 0x29, 0x94, 0xf4, 0x1f, 0xf5,
	0x82, 0x5e, 0x6b, 0x7a, 0x83, 0x87, 0xbf, 0x87, 0xad, 0x85, 0x6c, 0x3e, 0x33, 0x4b, 0xa4, 0x50,
	0x65, 0x73, 0xd3, 0xc3, 0x5c, 0x04, 0x67, 0x4b, 0xe5, 0x9f, 0x83, 0x1c, 0xf8, 0x35, 0xc8, 0x81,
	0x3f, 0x83, 0x1c, 0xd8, 0xfe, 0x9b, 0x3b, 0x72, 0xf3, 0x82, 0x6e, 0x38, 0x7c, 0xd5, 0xd4, 0xb0,
	0xcb, 0x3b, 0x58, 0xbd, 0x2d, 0x98, 0x05, 0xc7, 0x52, 0x34, 0x83, 0xe8, 0x05, 0xfb, 0xae, 0x1d,
	0x66, 0xd8, 0x2e, 0xe8, 0x94, 0x75, 0x21, 0xca, 0xfa, 0x25, 0xb7, 0x78, 0x2b, 0xce, 0xc2, 0x79,
	0xfe, 0x5f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xc4, 0x3d, 0x09, 0x7e, 0x00, 0x03, 0x00, 0x00,
}

func (m *FreezeAmountRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FreezeAmountRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FreezeAmountRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Amount) > 0 {
		i -= len(m.Amount)
		copy(dAtA[i:], m.Amount)
		i = encodeVarintFund(dAtA, i, uint64(len(m.Amount)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Volume) > 0 {
		i -= len(m.Volume)
		copy(dAtA[i:], m.Volume)
		i = encodeVarintFund(dAtA, i, uint64(len(m.Volume)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.CoreOrderId) > 0 {
		i -= len(m.CoreOrderId)
		copy(dAtA[i:], m.CoreOrderId)
		i = encodeVarintFund(dAtA, i, uint64(len(m.CoreOrderId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FreezeAmountResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FreezeAmountResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FreezeAmountResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Data != nil {
		{
			size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFund(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Msg) > 0 {
		i -= len(m.Msg)
		copy(dAtA[i:], m.Msg)
		i = encodeVarintFund(dAtA, i, uint64(len(m.Msg)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintFund(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *FreezeAmountResponse_Data) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FreezeAmountResponse_Data) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FreezeAmountResponse_Data) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Digit != 0 {
		i = encodeVarintFund(dAtA, i, uint64(m.Digit))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Commission) > 0 {
		i -= len(m.Commission)
		copy(dAtA[i:], m.Commission)
		i = encodeVarintFund(dAtA, i, uint64(len(m.Commission)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintFund(dAtA []byte, offset int, v uint64) int {
	offset -= sovFund(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *FreezeAmountRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CoreOrderId)
	if l > 0 {
		n += 1 + l + sovFund(uint64(l))
	}
	l = len(m.Volume)
	if l > 0 {
		n += 1 + l + sovFund(uint64(l))
	}
	l = len(m.Amount)
	if l > 0 {
		n += 1 + l + sovFund(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FreezeAmountResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovFund(uint64(m.Code))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovFund(uint64(l))
	}
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovFund(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FreezeAmountResponse_Data) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Commission)
	if l > 0 {
		n += 1 + l + sovFund(uint64(l))
	}
	if m.Digit != 0 {
		n += 1 + sovFund(uint64(m.Digit))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovFund(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozFund(x uint64) (n int) {
	return sovFund(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *FreezeAmountRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFund
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FreezeAmountRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FreezeAmountRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoreOrderId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFund
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFund
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFund
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CoreOrderId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Volume", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFund
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFund
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFund
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Volume = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFund
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFund
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFund
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFund(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFund
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FreezeAmountResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFund
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FreezeAmountResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FreezeAmountResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFund
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFund
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFund
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFund
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFund
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFund
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFund
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &FreezeAmountResponse_Data{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFund(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFund
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FreezeAmountResponse_Data) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFund
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Data: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Data: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Commission", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFund
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFund
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFund
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Commission = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Digit", wireType)
			}
			m.Digit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFund
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Digit |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFund(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFund
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipFund(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowFund
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFund
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFund
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthFund
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupFund
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthFund
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthFund        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowFund          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupFund = fmt.Errorf("proto: unexpected end of group")
)
