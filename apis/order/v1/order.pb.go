// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: order/v1/order.proto

package v1

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type CreateOrderRequest struct {
	RequestId            string   `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	AccountId            string   `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	Remark               string   `protobuf:"bytes,3,opt,name=remark,proto3" json:"remark,omitempty"`
	SymbolType           string   `protobuf:"bytes,4,opt,name=symbol_type,json=symbolType,proto3" json:"symbol_type,omitempty"`
	Reason               string   `protobuf:"bytes,5,opt,name=reason,proto3" json:"reason,omitempty"`
	TradeType            string   `protobuf:"bytes,6,opt,name=trade_type,json=tradeType,proto3" json:"trade_type,omitempty"`
	OrderType            string   `protobuf:"bytes,7,opt,name=order_type,json=orderType,proto3" json:"order_type,omitempty"`
	TimeInForce          string   `protobuf:"bytes,8,opt,name=time_in_force,json=timeInForce,proto3" json:"time_in_force,omitempty"`
	OrderSide            string   `protobuf:"bytes,9,opt,name=order_side,json=orderSide,proto3" json:"order_side,omitempty"`
	Symbol               string   `protobuf:"bytes,10,opt,name=symbol,proto3" json:"symbol,omitempty"`
	RequestAmount        string   `protobuf:"bytes,11,opt,name=request_amount,json=requestAmount,proto3" json:"request_amount,omitempty"`
	RequestVolume        string   `protobuf:"bytes,12,opt,name=request_volume,json=requestVolume,proto3" json:"request_volume,omitempty"`
	RequestPrice         string   `protobuf:"bytes,13,opt,name=request_price,json=requestPrice,proto3" json:"request_price,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateOrderRequest) Reset()         { *m = CreateOrderRequest{} }
func (m *CreateOrderRequest) String() string { return proto.CompactTextString(m) }
func (*CreateOrderRequest) ProtoMessage()    {}
func (*CreateOrderRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9d53b11373cba54b, []int{0}
}
func (m *CreateOrderRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateOrderRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateOrderRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateOrderRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateOrderRequest.Merge(m, src)
}
func (m *CreateOrderRequest) XXX_Size() int {
	return m.Size()
}
func (m *CreateOrderRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateOrderRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateOrderRequest proto.InternalMessageInfo

func (m *CreateOrderRequest) GetRequestId() string {
	if m != nil {
		return m.RequestId
	}
	return ""
}

func (m *CreateOrderRequest) GetAccountId() string {
	if m != nil {
		return m.AccountId
	}
	return ""
}

func (m *CreateOrderRequest) GetRemark() string {
	if m != nil {
		return m.Remark
	}
	return ""
}

func (m *CreateOrderRequest) GetSymbolType() string {
	if m != nil {
		return m.SymbolType
	}
	return ""
}

func (m *CreateOrderRequest) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

func (m *CreateOrderRequest) GetTradeType() string {
	if m != nil {
		return m.TradeType
	}
	return ""
}

func (m *CreateOrderRequest) GetOrderType() string {
	if m != nil {
		return m.OrderType
	}
	return ""
}

func (m *CreateOrderRequest) GetTimeInForce() string {
	if m != nil {
		return m.TimeInForce
	}
	return ""
}

func (m *CreateOrderRequest) GetOrderSide() string {
	if m != nil {
		return m.OrderSide
	}
	return ""
}

func (m *CreateOrderRequest) GetSymbol() string {
	if m != nil {
		return m.Symbol
	}
	return ""
}

func (m *CreateOrderRequest) GetRequestAmount() string {
	if m != nil {
		return m.RequestAmount
	}
	return ""
}

func (m *CreateOrderRequest) GetRequestVolume() string {
	if m != nil {
		return m.RequestVolume
	}
	return ""
}

func (m *CreateOrderRequest) GetRequestPrice() string {
	if m != nil {
		return m.RequestPrice
	}
	return ""
}

type CreateOrderResponse struct {
	Code                 int64                                `protobuf:"varint,1,opt,name=code,proto3" json:"code"`
	Msg                  string                               `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg"`
	Data                 *CreateOrderResponse_CreateOrderData `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                             `json:"-"`
	XXX_unrecognized     []byte                               `json:"-"`
	XXX_sizecache        int32                                `json:"-"`
}

func (m *CreateOrderResponse) Reset()         { *m = CreateOrderResponse{} }
func (m *CreateOrderResponse) String() string { return proto.CompactTextString(m) }
func (*CreateOrderResponse) ProtoMessage()    {}
func (*CreateOrderResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9d53b11373cba54b, []int{1}
}
func (m *CreateOrderResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateOrderResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateOrderResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateOrderResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateOrderResponse.Merge(m, src)
}
func (m *CreateOrderResponse) XXX_Size() int {
	return m.Size()
}
func (m *CreateOrderResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateOrderResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CreateOrderResponse proto.InternalMessageInfo

func (m *CreateOrderResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *CreateOrderResponse) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *CreateOrderResponse) GetData() *CreateOrderResponse_CreateOrderData {
	if m != nil {
		return m.Data
	}
	return nil
}

type CreateOrderResponse_CreateOrderData struct {
	RequestId            string   `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	ResponseTime         int64    `protobuf:"varint,2,opt,name=response_time,json=responseTime,proto3" json:"response_time,omitempty"`
	Order                string   `protobuf:"bytes,3,opt,name=order,proto3" json:"order,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateOrderResponse_CreateOrderData) Reset()         { *m = CreateOrderResponse_CreateOrderData{} }
func (m *CreateOrderResponse_CreateOrderData) String() string { return proto.CompactTextString(m) }
func (*CreateOrderResponse_CreateOrderData) ProtoMessage()    {}
func (*CreateOrderResponse_CreateOrderData) Descriptor() ([]byte, []int) {
	return fileDescriptor_9d53b11373cba54b, []int{1, 0}
}
func (m *CreateOrderResponse_CreateOrderData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateOrderResponse_CreateOrderData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateOrderResponse_CreateOrderData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateOrderResponse_CreateOrderData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateOrderResponse_CreateOrderData.Merge(m, src)
}
func (m *CreateOrderResponse_CreateOrderData) XXX_Size() int {
	return m.Size()
}
func (m *CreateOrderResponse_CreateOrderData) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateOrderResponse_CreateOrderData.DiscardUnknown(m)
}

var xxx_messageInfo_CreateOrderResponse_CreateOrderData proto.InternalMessageInfo

func (m *CreateOrderResponse_CreateOrderData) GetRequestId() string {
	if m != nil {
		return m.RequestId
	}
	return ""
}

func (m *CreateOrderResponse_CreateOrderData) GetResponseTime() int64 {
	if m != nil {
		return m.ResponseTime
	}
	return 0
}

func (m *CreateOrderResponse_CreateOrderData) GetOrder() string {
	if m != nil {
		return m.Order
	}
	return ""
}

func init() {
	proto.RegisterType((*CreateOrderRequest)(nil), "CreateOrderRequest")
	proto.RegisterType((*CreateOrderResponse)(nil), "CreateOrderResponse")
	proto.RegisterType((*CreateOrderResponse_CreateOrderData)(nil), "CreateOrderResponse.CreateOrderData")
}

func init() { proto.RegisterFile("order/v1/order.proto", fileDescriptor_9d53b11373cba54b) }

var fileDescriptor_9d53b11373cba54b = []byte{
	// 1066 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x55, 0xdd, 0x6f, 0x1b, 0x45,
	0x10, 0xe7, 0x9c, 0x34, 0x89, 0xd7, 0x4e, 0x0a, 0xd7, 0x22, 0x8e, 0xa8, 0x4a, 0x2a, 0x53, 0x3e,
	0x1a, 0xce, 0x36, 0x3d, 0x04, 0x88, 0x22, 0x21, 0xad, 0x1d, 0x27, 0xb1, 0xea, 0x3a, 0xd6, 0xd9,
	0x01, 0x8a, 0x84, 0xac, 0x8b, 0x6f, 0xe3, 0x9e, 0x88, 0x6f, 0x8f, 0xbb, 0x8b, 0x51, 0xde, 0x68,
	0x24, 0x94, 0x20, 0x88, 0x92, 0x5e, 0x12, 0xda, 0xaa, 0x4d, 0x29, 0xa5, 0x7c, 0x48, 0x48, 0xa4,
	0x15, 0x15, 0x11, 0x49, 0xa5, 0xbc, 0xf2, 0x88, 0xcc, 0x7b, 0x85, 0xd2, 0xdc, 0x25, 0xee, 0x0b,
	0x92, 0xff, 0x02, 0x74, 0x7b, 0xeb, 0xe4, 0xd2, 0xfa, 0x65, 0x77, 0x67, 0xf6, 0x37, 0xbf, 0x9d,
	0x99, 0x9d, 0x9d, 0x05, 0xc7, 0xb1, 0x2e, 0x23, 0x3d, 0x5e, 0x3d, 0x13, 0x27, 0x8b, 0x98, 0xa6,
	0x63, 0x13, 0xf7, 0x9e, 0x28, 0x63, 0x5c, 0x9e, 0x44, 0x71, 0x49, 0x53, 0xe2, 0x92, 0xaa, 0x62,
	0x53, 0x32, 0x15, 0xac, 0x1a, 0x74, 0xd7, 0x9b, 0x4a, 0xd1, 0x32, 0x52, 0xa3, 0x58, 0x43, 0xaa,
	0xa4, 0x29, 0x55, 0x21, 0x8e, 0x35, 0x82, 0x69, 0x81, 0x8f, 0x96, 0x15, 0xf3, 0xe2, 0xd4, 0x78,
	0xac, 0x84, 0x2b, 0xf1, 0x32, 0x2e, 0xe3, 0x38, 0x51, 0x8f, 0x4f, 0x4d, 0x10, 0x89, 0x08, 0x64,
	0xe5, 0xc1, 0x23, 0x4e, 0x27, 0x60, 0x93, 0x3a, 0x92, 0x4c, 0x34, 0xea, 0xba, 0x24, 0xa2, 0xcf,
	0xa6, 0x90, 0x61, 0xb2, 0xef, 0x02, 0xa0, 0x7b, 0xcb, 0xa2, 0x22, 0x73, 0xcc, 0x49, 0xe6, 0xb5,
	0x60, 0xa2, 0xd7, 0x82, 0x2f, 0x08, 0x5d, 0x7b, 0x6b, 0xeb, 0xce, 0xbd, 0x19, 0x45, 0xae, 0x31,
	0x3e, 0x84, 0x18, 0xa4, 0xeb, 0xb4, 0xcc, 0xbe, 0x01, 0x80, 0x54, 0x2a, 0xe1, 0x29, 0x95, 0x98,
	0x06, 0x88, 0xe9, 0x73, 0x16, 0xec, 0x11, 0xc2, 0x7b, 0xf7, 0x7f, 0x72, 0xe6, 0xd6, 0x77, 0x36,
	0x7f, 0xd8, 0xbd, 0x75, 0x49, 0x0c, 0x52, 0x50, 0x5a, 0x66, 0x4f, 0x83, 0x0e, 0x1d, 0x55, 0x24,
	0xfd, 0x53, 0xae, 0xcd, 0x8f, 0xfe, 0xed, 0xb6, 0x3d, 0xbf, 0x62, 0xdf, 0x99, 0x75, 0x7e, 0xff,
	0x45, 0xa4, 0x00, 0x76, 0x1c, 0x84, 0x8c, 0xe9, 0xca, 0x38, 0x9e, 0x2c, 0x9a, 0xd3, 0x1a, 0xe2,
	0xda, 0x09, 0x1e, 0x5a, 0xf0, 0x7d, 0x21, 0x6c, 0x2f, 0x5d, 0xda, 0xfd, 0x79, 0x7e, 0xf7, 0xde,
	0xa6, 0x7d, 0xf3, 0xeb, 0x1a, 0xe3, 0x87, 0x35, 0x02, 0xfd, 0xf9, 0xc2, 0x68, 0xf2, 0x1c, 0x3f,
	0x34, 0x96, 0x1d, 0x2c, 0xe6, 0xc6, 0x12, 0x99, 0x74, 0xb2, 0x38, 0x3a, 0x34, 0x94, 0x12, 0xd3,
	0xd9, 0x61, 0x3e, 0x55, 0x18, 0xca, 0x8b, 0xc0, 0x83, 0x17, 0xa6, 0x35, 0xc4, 0x26, 0x5c, 0x77,
	0x24, 0x03, 0xab, 0xdc, 0x11, 0x42, 0x3f, 0x60, 0xc1, 0x57, 0x9b, 0xee, 0x38, 0xab, 0x3f, 0x3a,
	0x1b, 0x8b, 0x35, 0x86, 0x22, 0x1a, 0x81, 0x6e, 0x98, 0xcb, 0xf1, 0x1f, 0xa6, 0x12, 0x7c, 0x2e,
	0xc9, 0x17, 0xf2, 0x22, 0xd5, 0xb3, 0x83, 0x00, 0x98, 0xba, 0x24, 0x23, 0xcf, 0xcd, 0x0e, 0xc2,
	0xf3, 0xb2, 0x05, 0x23, 0x42, 0x78, 0x67, 0xe3, 0x8e, 0x73, 0x75, 0xa9, 0xe9, 0xa6, 0x0f, 0xd5,
	0x08, 0xb4, 0x67, 0x46, 0xb3, 0xc3, 0x62, 0x90, 0xa8, 0x88, 0x27, 0x9f, 0x03, 0x40, 0x0a, 0xc5,
	0x63, 0xe9, 0x24, 0x2c, 0x1f, 0x59, 0x70, 0xac, 0xe9, 0xcd, 0x3e, 0xcb, 0x01, 0xaa, 0x11, 0x78,
	0xe7, 0x3c, 0x14, 0xcf, 0xa5, 0x0a, 0x7c, 0x2a, 0x3b, 0x02, 0xb3, 0xc9, 0xd4, 0x60, 0x31, 0x93,
	0x3e, 0x9f, 0x2e, 0xf0, 0xf9, 0x5c, 0x2a, 0x99, 0x86, 0x19, 0x2a, 0xc1, 0xb1, 0x64, 0x21, 0x3d,
	0x9a, 0xa5, 0x12, 0x19, 0xc5, 0x20, 0x61, 0x21, 0x07, 0x8b, 0xa0, 0xdb, 0x54, 0x2a, 0xa8, 0xa8,
	0xa8, 0xc5, 0x09, 0xac, 0x97, 0x10, 0xd7, 0x45, 0xce, 0x8e, 0x59, 0xf0, 0x75, 0xe1, 0x28, 0xcd,
	0xc4, 0x8d, 0xaf, 0x9c, 0x95, 0x39, 0xe7, 0xc6, 0x77, 0x35, 0xe6, 0x30, 0xb6, 0x11, 0xe8, 0x1c,
	0x2e, 0x24, 0xf9, 0x41, 0x78, 0x41, 0x0c, 0xb9, 0x1b, 0x69, 0x75, 0xc8, 0x55, 0xb3, 0x23, 0xcd,
	0x60, 0x0c, 0x45, 0x46, 0x5c, 0x90, 0x10, 0x9e, 0xb6, 0xe0, 0x2b, 0xfb, 0xa9, 0xfd, 0xf6, 0x4f,
	0x7b, 0xf1, 0xf2, 0x7e, 0x30, 0x2e, 0xaa, 0x11, 0xe8, 0x4a, 0x8c, 0x5d, 0xe0, 0xf3, 0xa9, 0x4c,
	0x86, 0x7a, 0x97, 0x57, 0x64, 0xc4, 0x0a, 0xa0, 0xc3, 0xbb, 0x2e, 0x0e, 0x1c, 0x14, 0x26, 0xbd,
	0x7f, 0xaf, 0xba, 0x6a, 0x0c, 0x45, 0x88, 0x74, 0x66, 0xd3, 0xa0, 0xa7, 0x59, 0xae, 0x52, 0xc5,
	0xad, 0x3b, 0x2e, 0x44, 0x6c, 0x23, 0x16, 0xec, 0x17, 0xc2, 0x5e, 0x51, 0xd7, 0x67, 0x2f, 0xd7,
	0x6f, 0xaf, 0xd6, 0x98, 0x27, 0x90, 0x62, 0x37, 0x95, 0x21, 0x11, 0xfd, 0x54, 0x55, 0x3c, 0x39,
	0x55, 0x41, 0x5c, 0xf8, 0x29, 0x2a, 0x67, 0xe5, 0x6e, 0x7d, 0x76, 0xc1, 0x47, 0xe5, 0x21, 0xf7,
	0xa9, 0x3e, 0x20, 0x22, 0x3b, 0x02, 0x9a, 0x8a, 0xa2, 0xa6, 0x2b, 0x25, 0xc4, 0x75, 0x13, 0xa6,
	0x97, 0x2c, 0x78, 0x52, 0xe8, 0xf3, 0x98, 0x76, 0x36, 0xd7, 0x9d, 0x5b, 0x0f, 0xfe, 0x7b, 0xf0,
	0x4d, 0xfd, 0xda, 0xe2, 0xce, 0xe6, 0xba, 0xbd, 0xf5, 0xa5, 0xfd, 0xfd, 0xaf, 0x8f, 0xbe, 0x98,
	0x11, 0xc3, 0xd4, 0x32, 0xe7, 0x1a, 0x9e, 0xed, 0xb7, 0xe0, 0x09, 0xd0, 0x2b, 0x70, 0xf6, 0xdc,
	0x75, 0x7b, 0x73, 0xc3, 0xcb, 0xa8, 0x47, 0x60, 0x2f, 0xb8, 0xde, 0x44, 0x16, 0xdb, 0xc0, 0xb1,
	0x43, 0x0f, 0xdd, 0xd0, 0xb0, 0x6a, 0x20, 0x36, 0x0a, 0xda, 0x4b, 0x58, 0x46, 0xe4, 0x8d, 0xb7,
	0x25, 0x5e, 0x24, 0x4f, 0xaf, 0xbe, 0x7c, 0x6d, 0x6f, 0x6d, 0xcd, 0x4b, 0xe5, 0xe3, 0x87, 0xfd,
	0x04, 0x20, 0x92, 0x91, 0x1d, 0x00, 0x6d, 0x15, 0xa3, 0x4c, 0x9f, 0x35, 0xe7, 0x43, 0x3b, 0x0b,
	0x0b, 0x7b, 0x5b, 0x77, 0x1f, 0x3f, 0xec, 0x77, 0xf7, 0x45, 0x77, 0x60, 0x3f, 0x01, 0xed, 0xb2,
	0x64, 0x4a, 0xe4, 0x55, 0x87, 0x84, 0x53, 0xb1, 0x16, 0xc7, 0xfb, 0x75, 0x83, 0x92, 0x29, 0xd1,
	0xd0, 0x0f, 0x45, 0xb1, 0xb5, 0x6c, 0x5f, 0xbf, 0xe9, 0x45, 0x61, 0x2f, 0xcd, 0xdb, 0x1b, 0xcb,
	0x22, 0xa1, 0xed, 0x5d, 0x65, 0xc0, 0xd1, 0x27, 0xcc, 0x59, 0xbe, 0x45, 0xdf, 0xea, 0xb6, 0x20,
	0x38, 0xe8, 0x5b, 0xfe, 0x56, 0xf5, 0xb6, 0x9b, 0x7e, 0xcf, 0x91, 0xa2, 0x5b, 0xaa, 0x24, 0xac,
	0x36, 0xda, 0x7f, 0xbc, 0xb3, 0x9c, 0x2b, 0x7f, 0xd4, 0xaf, 0xdc, 0x77, 0x93, 0xed, 0xe1, 0x0a,
	0x4a, 0x05, 0xb1, 0xa7, 0xc0, 0x11, 0x52, 0x8d, 0xb4, 0x5f, 0xf5, 0x58, 0x30, 0x24, 0x04, 0x69,
	0xbf, 0x5a, 0x58, 0x17, 0xbd, 0xcd, 0xd6, 0x57, 0xe2, 0x0b, 0x46, 0xa8, 0x82, 0x30, 0xf1, 0x3c,
	0x8f, 0xf4, 0xaa, 0x52, 0x42, 0xec, 0x04, 0x08, 0xf9, 0xe2, 0x61, 0x8f, 0xc5, 0x9e, 0x6e, 0xcc,
	0xbd, 0xc7, 0x5b, 0x65, 0x31, 0xc2, 0x5b, 0xb0, 0x87, 0x0d, 0xfb, 0x0f, 0x9a, 0xf9, 0x67, 0x67,
	0x29, 0xf0, 0x7c, 0xe4, 0xd9, 0xfd, 0xcf, 0x26, 0x5e, 0x22, 0x76, 0x67, 0x99, 0x81, 0xc4, 0xf0,
	0x5f, 0xdb, 0x7d, 0xcc, 0xdf, 0xdb, 0x7d, 0xcc, 0xbf, 0xdb, 0x7d, 0xcc, 0xd5, 0x47, 0x7d, 0xcf,
	0x7c, 0xfc, 0x56, 0x59, 0x31, 0x63, 0x13, 0x9a, 0x8c, 0xaa, 0x31, 0x13, 0x95, 0x2e, 0xc6, 0xb5,
	0xa8, 0xdb, 0x84, 0x14, 0xb5, 0x1c, 0x35, 0xa6, 0x0d, 0xf7, 0x63, 0x32, 0xa2, 0x65, 0x4c, 0xe6,
	0x78, 0xf3, 0x0b, 0x7b, 0xaf, 0x7a, 0x66, 0xbc, 0x83, 0xfc, 0x21, 0x6f, 0xfe, 0x1f, 0x00, 0x00,
	0xff, 0xff, 0x6f, 0x8d, 0x08, 0x56, 0xd8, 0x06, 0x00, 0x00,
}

func (m *CreateOrderRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateOrderRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateOrderRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.RequestPrice) > 0 {
		i -= len(m.RequestPrice)
		copy(dAtA[i:], m.RequestPrice)
		i = encodeVarintOrder(dAtA, i, uint64(len(m.RequestPrice)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.RequestVolume) > 0 {
		i -= len(m.RequestVolume)
		copy(dAtA[i:], m.RequestVolume)
		i = encodeVarintOrder(dAtA, i, uint64(len(m.RequestVolume)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.RequestAmount) > 0 {
		i -= len(m.RequestAmount)
		copy(dAtA[i:], m.RequestAmount)
		i = encodeVarintOrder(dAtA, i, uint64(len(m.RequestAmount)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.Symbol) > 0 {
		i -= len(m.Symbol)
		copy(dAtA[i:], m.Symbol)
		i = encodeVarintOrder(dAtA, i, uint64(len(m.Symbol)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.OrderSide) > 0 {
		i -= len(m.OrderSide)
		copy(dAtA[i:], m.OrderSide)
		i = encodeVarintOrder(dAtA, i, uint64(len(m.OrderSide)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.TimeInForce) > 0 {
		i -= len(m.TimeInForce)
		copy(dAtA[i:], m.TimeInForce)
		i = encodeVarintOrder(dAtA, i, uint64(len(m.TimeInForce)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.OrderType) > 0 {
		i -= len(m.OrderType)
		copy(dAtA[i:], m.OrderType)
		i = encodeVarintOrder(dAtA, i, uint64(len(m.OrderType)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.TradeType) > 0 {
		i -= len(m.TradeType)
		copy(dAtA[i:], m.TradeType)
		i = encodeVarintOrder(dAtA, i, uint64(len(m.TradeType)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Reason) > 0 {
		i -= len(m.Reason)
		copy(dAtA[i:], m.Reason)
		i = encodeVarintOrder(dAtA, i, uint64(len(m.Reason)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.SymbolType) > 0 {
		i -= len(m.SymbolType)
		copy(dAtA[i:], m.SymbolType)
		i = encodeVarintOrder(dAtA, i, uint64(len(m.SymbolType)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Remark) > 0 {
		i -= len(m.Remark)
		copy(dAtA[i:], m.Remark)
		i = encodeVarintOrder(dAtA, i, uint64(len(m.Remark)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.AccountId) > 0 {
		i -= len(m.AccountId)
		copy(dAtA[i:], m.AccountId)
		i = encodeVarintOrder(dAtA, i, uint64(len(m.AccountId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.RequestId) > 0 {
		i -= len(m.RequestId)
		copy(dAtA[i:], m.RequestId)
		i = encodeVarintOrder(dAtA, i, uint64(len(m.RequestId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateOrderResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateOrderResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateOrderResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Data != nil {
		{
			size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintOrder(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Msg) > 0 {
		i -= len(m.Msg)
		copy(dAtA[i:], m.Msg)
		i = encodeVarintOrder(dAtA, i, uint64(len(m.Msg)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintOrder(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CreateOrderResponse_CreateOrderData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateOrderResponse_CreateOrderData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateOrderResponse_CreateOrderData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Order) > 0 {
		i -= len(m.Order)
		copy(dAtA[i:], m.Order)
		i = encodeVarintOrder(dAtA, i, uint64(len(m.Order)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ResponseTime != 0 {
		i = encodeVarintOrder(dAtA, i, uint64(m.ResponseTime))
		i--
		dAtA[i] = 0x10
	}
	if len(m.RequestId) > 0 {
		i -= len(m.RequestId)
		copy(dAtA[i:], m.RequestId)
		i = encodeVarintOrder(dAtA, i, uint64(len(m.RequestId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintOrder(dAtA []byte, offset int, v uint64) int {
	offset -= sovOrder(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CreateOrderRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RequestId)
	if l > 0 {
		n += 1 + l + sovOrder(uint64(l))
	}
	l = len(m.AccountId)
	if l > 0 {
		n += 1 + l + sovOrder(uint64(l))
	}
	l = len(m.Remark)
	if l > 0 {
		n += 1 + l + sovOrder(uint64(l))
	}
	l = len(m.SymbolType)
	if l > 0 {
		n += 1 + l + sovOrder(uint64(l))
	}
	l = len(m.Reason)
	if l > 0 {
		n += 1 + l + sovOrder(uint64(l))
	}
	l = len(m.TradeType)
	if l > 0 {
		n += 1 + l + sovOrder(uint64(l))
	}
	l = len(m.OrderType)
	if l > 0 {
		n += 1 + l + sovOrder(uint64(l))
	}
	l = len(m.TimeInForce)
	if l > 0 {
		n += 1 + l + sovOrder(uint64(l))
	}
	l = len(m.OrderSide)
	if l > 0 {
		n += 1 + l + sovOrder(uint64(l))
	}
	l = len(m.Symbol)
	if l > 0 {
		n += 1 + l + sovOrder(uint64(l))
	}
	l = len(m.RequestAmount)
	if l > 0 {
		n += 1 + l + sovOrder(uint64(l))
	}
	l = len(m.RequestVolume)
	if l > 0 {
		n += 1 + l + sovOrder(uint64(l))
	}
	l = len(m.RequestPrice)
	if l > 0 {
		n += 1 + l + sovOrder(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CreateOrderResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovOrder(uint64(m.Code))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovOrder(uint64(l))
	}
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovOrder(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CreateOrderResponse_CreateOrderData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RequestId)
	if l > 0 {
		n += 1 + l + sovOrder(uint64(l))
	}
	if m.ResponseTime != 0 {
		n += 1 + sovOrder(uint64(m.ResponseTime))
	}
	l = len(m.Order)
	if l > 0 {
		n += 1 + l + sovOrder(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovOrder(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozOrder(x uint64) (n int) {
	return sovOrder(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CreateOrderRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOrder
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateOrderRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateOrderRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrder
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrder
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrder
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrder
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccountId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Remark", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrder
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrder
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Remark = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SymbolType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrder
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrder
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SymbolType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrder
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrder
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TradeType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrder
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrder
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TradeType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrder
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrder
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeInForce", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrder
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrder
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TimeInForce = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderSide", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrder
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrder
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderSide = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Symbol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrder
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrder
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Symbol = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrder
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrder
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestAmount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestVolume", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrder
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrder
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestVolume = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestPrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrder
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrder
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestPrice = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOrder(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOrder
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateOrderResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOrder
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateOrderResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateOrderResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrder
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrder
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOrder
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOrder
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &CreateOrderResponse_CreateOrderData{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOrder(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOrder
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateOrderResponse_CreateOrderData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOrder
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateOrderData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateOrderData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrder
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrder
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResponseTime", wireType)
			}
			m.ResponseTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResponseTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Order", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrder
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrder
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Order = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOrder(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOrder
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipOrder(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowOrder
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthOrder
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupOrder
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthOrder
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthOrder        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowOrder          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupOrder = fmt.Errorf("proto: unexpected end of group")
)
